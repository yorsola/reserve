<?xml version="1.0" encoding="UTF-8"?>
<configuration>      
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->      
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->  
    <!-- ConsoleAppender：把日志输出到控制台 -->  
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">      
        <encoder>      
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %-50logger{15} %m%n</pattern>    
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->  
            <charset>UTF-8</charset>     
        </encoder> 
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>      
    </appender>
    
    <appender name="apipoint"      
        class="ch.qos.logback.core.rolling.RollingFileAppender">      
        <File>log/apipoint/apiPoint.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->  
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">      
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->  
            <!-- 文件名：log/sys.2017-12-05.0.log -->  
            <fileNamePattern>log/apipoint/apiPoint.%d.%i.log.gz</fileNamePattern>   
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->   
            <maxHistory>30</maxHistory>     
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">      
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->    
                <maxFileSize>512MB</maxFileSize>      
            </timeBasedFileNamingAndTriggeringPolicy>      
        </rollingPolicy>      
        <encoder>
        	<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %m%n</pattern> 
            <!-- 记录日志的编码 -->  
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->     
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>TRACE</level>
		</filter>      
    </appender>  
        
    <root level="trace">      
        <appender-ref ref="STDOUT" />
    </root>

    <!-- 项目的日志，包括通过Log工具打印的log -->
    <logger name="com.ac.service" level="INFO" additivity="false">
        <appender-ref ref="apipoint" />    
    </logger>
    
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->  
    <!-- com.appley为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->  
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->  
    <logger name="com.ac.reserve.common.utils.log" level="TRACE" additivity="false">
        <appender-ref ref="apipoint" />      
    </logger>
</configuration>
